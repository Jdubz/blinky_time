name: Blinky Time CI/CD with Versioning

on:
  push:
    branches: [ master, staging, develop ]
  pull_request:
    branches: [ master, staging ]

env:
  ARDUINO_CLI_VERSION: 1.3.1

jobs:
  # Automated testing on all pushes
  test-suite:
    runs-on: ubuntu-latest
    if: github.ref != 'refs/heads/master'
    
    strategy:
      matrix:
        device-type: [1, 2, 3]  # Hat, Tube Light, Bucket Totem
        
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Arduino CLI
      uses: arduino/setup-arduino-cli@v1
      with:
        version: ${{ env.ARDUINO_CLI_VERSION }}
      
    - name: Install Arduino cores and libraries
      run: |
        arduino-cli config init
        arduino-cli config add board_manager.additional_urls https://files.seeedstudio.com/arduino/package_seeeduino_boards_index.json
        arduino-cli core update-index
        arduino-cli core install Seeeduino:nrf52
        arduino-cli lib install "Adafruit NeoPixel"
        arduino-cli lib install "Seeed Arduino LSM6DS3"
        
    - name: Set device type for testing
      run: |
        sed -i 's/#define DEVICE_TYPE [0-9]/#define DEVICE_TYPE ${{ matrix.device-type }}/' blinky-things/blinky-things.ino
        
    - name: Compile main sketch
      run: |
        arduino-cli compile --fqbn Seeeduino:nrf52:xiaonRF52840Sense blinky-things/ --verbose
        
    - name: Compile test runner
      run: |
        arduino-cli compile --fqbn Seeeduino:nrf52:xiaonRF52840Sense tests/ --verbose
        
    - name: Check memory usage
      run: |
        echo "=== Memory Usage Report for Device Type ${{ matrix.device-type }} ==="
        arduino-cli compile --fqbn Seeeduino:nrf52:xiaonRF52840Sense blinky-things/ 2>&1 | grep -E "(Sketch uses|Global variables use)" || echo "Memory info not available"
        
    - name: Validate effect tests
      run: |
        echo "Validating effect test framework..."
        if [ -f "blinky-things/tests/FireEffectTest.h" ]; then
          echo "✅ FireEffectTest found"
        else
          echo "❌ FireEffectTest missing"
          exit 1
        fi
        
        if [ -f "blinky-things/EffectTestRunner.h" ]; then
          echo "✅ EffectTestRunner found"  
        else
          echo "❌ EffectTestRunner missing"
          exit 1
        fi

  # Code quality and documentation checks
  quality-checks:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        pip install pyserial
        
    - name: Check code formatting
      run: |
        echo "Checking for common code issues..."
        
        # Check for trailing whitespace
        if find blinky-things/ -name "*.cpp" -o -name "*.h" -o -name "*.ino" | xargs grep -l "[ \t]$"; then
          echo "❌ Found trailing whitespace in files above"
          exit 1
        fi
        echo "✅ No trailing whitespace found"
        
        # Check for consistent include guards
        echo "Checking include guards..."
        find blinky-things/ -name "*.h" -exec grep -L "#pragma once\|#ifndef.*_H" {} \; | while read file; do
          echo "❌ Missing include guard in $file"
          exit 1
        done
        echo "✅ Include guards OK"
        
    - name: Validate configurations
      run: |
        echo "Validating device configurations..."
        if [ -f "tests/validate_configs.py" ]; then
          python tests/validate_configs.py
        else
          echo "⚠️  Configuration validator not found, skipping"
        fi
        
    - name: Check documentation completeness
      run: |
        echo "Checking documentation..."
        
        required_files=("README.md" "LICENSE" "CONTRIBUTING.md" "BUILD_GUIDE.md")
        for file in "${required_files[@]}"; do
          if [ ! -f "$file" ]; then
            echo "❌ Missing required file: $file"
            exit 1
          fi
        done
        echo "✅ All required documentation files present"

  # Version management for staging branch
  staging-version:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/staging' && github.event_name == 'push'
    needs: [test-suite, quality-checks]
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Setup Git
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
    - name: Generate version number
      id: version
      run: |
        # Get current date and commit count
        DATE=$(date +%Y.%m.%d)
        COMMIT_COUNT=$(git rev-list --count HEAD)
        SHORT_SHA=$(git rev-parse --short HEAD)
        
        # Create staging version: YYYY.MM.DD-staging.COMMIT_COUNT+SHA
        STAGING_VERSION="${DATE}-staging.${COMMIT_COUNT}+${SHORT_SHA}"
        
        echo "version=${STAGING_VERSION}" >> $GITHUB_OUTPUT
        echo "Generated staging version: ${STAGING_VERSION}"
        
    - name: Update version in code
      run: |
        VERSION="${{ steps.version.outputs.version }}"
        
        # Update version in main sketch
        sed -i "s/Version: .*/Version: ${VERSION}/" blinky-things/blinky-things.ino || echo "Version line not found, adding..."
        
        # Add version if it doesn't exist
        if ! grep -q "Version:" blinky-things/blinky-things.ino; then
          sed -i '/ \* Blinky Time - LED Fire Effect Controller/a \ * Version: '"${VERSION}" blinky-things/blinky-things.ino
        fi
        
        # Create/update VERSION file
        echo "${VERSION}" > VERSION
        
    - name: Create version tag
      run: |
        VERSION="${{ steps.version.outputs.version }}"
        git add VERSION blinky-things/blinky-things.ino
        git commit -m "🔖 Bump version to ${VERSION}" || echo "No changes to commit"
        git tag -a "v${VERSION}" -m "Staging release v${VERSION}"
        git push origin "v${VERSION}"
        
    - name: Create GitHub pre-release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ steps.version.outputs.version }}
        release_name: Staging Release v${{ steps.version.outputs.version }}
        body: |
          🔥 **Blinky Time Staging Release**
          
          This is an automated staging release for testing and validation.
          
          **Version:** `${{ steps.version.outputs.version }}`
          **Branch:** `staging`
          **Commit:** `${{ github.sha }}`
          
          **✅ Automated Tests Passed:**
          - Compilation for all device types (Hat, Tube Light, Bucket Totem)
          - Code quality checks
          - Documentation validation
          - Effect test framework validation
          
          **🔧 Changes since last release:**
          ${{ github.event.head_commit.message }}
          
          **⚠️ Pre-release Notice:**
          This is a staging release intended for testing. For stable releases, see releases from the `master` branch.
        draft: false
        prerelease: true

  # Production release for master branch
  production-release:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master' && github.event_name == 'push'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Setup Git
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
    - name: Generate production version
      id: version
      run: |
        # Get the latest tag or default to 1.0.0
        LATEST_TAG=$(git describe --tags --abbrev=0 --match="v[0-9]*.[0-9]*.[0-9]*" 2>/dev/null || echo "v1.0.0")
        
        # Extract version numbers
        VERSION_NUM=$(echo $LATEST_TAG | sed 's/^v//')
        IFS='.' read -ra VERSION_PARTS <<< "$VERSION_NUM"
        
        # Increment patch version
        MAJOR=${VERSION_PARTS[0]}
        MINOR=${VERSION_PARTS[1]}
        PATCH=$((${VERSION_PARTS[2]} + 1))
        
        NEW_VERSION="${MAJOR}.${MINOR}.${PATCH}"
        
        echo "version=${NEW_VERSION}" >> $GITHUB_OUTPUT
        echo "Generated production version: ${NEW_VERSION}"
        
    - name: Run full test suite
      uses: arduino/setup-arduino-cli@v1
      with:
        version: ${{ env.ARDUINO_CLI_VERSION }}
        
    - name: Install dependencies and test all configurations
      run: |
        arduino-cli config init
        arduino-cli config add board_manager.additional_urls https://files.seeedstudio.com/arduino/package_seeeduino_boards_index.json
        arduino-cli core update-index
        arduino-cli core install Seeeduino:nrf52
        arduino-cli lib install "Adafruit NeoPixel"
        arduino-cli lib install "Seeed Arduino LSM6DS3"
        
        # Test all device configurations
        for device_type in 1 2 3; do
          echo "Testing device type $device_type..."
          sed -i "s/#define DEVICE_TYPE [0-9]/#define DEVICE_TYPE $device_type/" blinky-things/blinky-things.ino
          arduino-cli compile --fqbn Seeeduino:nrf52:xiaonRF52840Sense blinky-things/
        done
        
        echo "✅ All configurations compile successfully"
        
    - name: Update version and create release
      run: |
        VERSION="${{ steps.version.outputs.version }}"
        
        # Update version in code
        sed -i "s/Version: .*/Version: ${VERSION}/" blinky-things/blinky-things.ino
        echo "${VERSION}" > VERSION
        
        # Generate changelog
        echo "# Release Notes v${VERSION}" > RELEASE_NOTES.md
        echo "" >> RELEASE_NOTES.md
        echo "## 🔥 Features" >> RELEASE_NOTES.md
        echo "- Fire effect with realistic color progression" >> RELEASE_NOTES.md
        echo "- Audio-reactive visual effects" >> RELEASE_NOTES.md
        echo "- Support for multiple device configurations" >> RELEASE_NOTES.md
        echo "- Comprehensive testing framework" >> RELEASE_NOTES.md
        echo "" >> RELEASE_NOTES.md
        echo "## 🧪 Tested Configurations" >> RELEASE_NOTES.md
        echo "- ✅ Hat (89 LEDs, STRING_FIRE)" >> RELEASE_NOTES.md
        echo "- ✅ Tube Light (4x15 matrix, MATRIX_FIRE)" >> RELEASE_NOTES.md
        echo "- ✅ Bucket Totem (16x8 matrix, MATRIX_FIRE)" >> RELEASE_NOTES.md
        echo "" >> RELEASE_NOTES.md
        echo "## 📝 Recent Changes" >> RELEASE_NOTES.md
        git log --pretty=format:"- %s" --since="$(git log -1 --format=%aI $(git describe --tags --abbrev=0 --match='v[0-9]*.[0-9]*.[0-9]*' HEAD~1 2>/dev/null || echo HEAD~10))" >> RELEASE_NOTES.md
        
    - name: Create GitHub release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ steps.version.outputs.version }}
        release_name: Release v${{ steps.version.outputs.version }}
        body_path: RELEASE_NOTES.md
        draft: false
        prerelease: false

  # PR validation
  pr-validation:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Validate PR
      run: |
        echo "🔍 Validating Pull Request"
        echo "Base: ${{ github.base_ref }}"
        echo "Head: ${{ github.head_ref }}"
        
        # Check if PR is to master from staging
        if [ "${{ github.base_ref }}" = "master" ] && [ "${{ github.head_ref }}" != "staging" ]; then
          echo "❌ Pull requests to master must come from staging branch"
          exit 1
        fi
        
        echo "✅ PR validation passed"
        
    - name: Comment on PR
      uses: actions/github-script@v6
      with:
        script: |
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: '🤖 **Automated PR Validation**\n\n✅ All checks passed!\n\n- Code compilation verified\n- Quality checks completed\n- Documentation validated\n\nReady for review! 🚀'
          });